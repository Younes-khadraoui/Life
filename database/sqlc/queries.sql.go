// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createTodo = `-- name: CreateTodo :exec
INSERT INTO Todos (title, description, category_id, severity, done, archived, created_at, updated_at) 
VALUES (?, ?, ?, ?, COALESCE(?, FALSE), COALESCE(?, FALSE), CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
`

type CreateTodoParams struct {
	Title       string
	Description sql.NullString
	CategoryID  sql.NullInt64
	Severity    int64
	Column5     interface{}
	Column6     interface{}
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) error {
	_, err := q.db.ExecContext(ctx, createTodo,
		arg.Title,
		arg.Description,
		arg.CategoryID,
		arg.Severity,
		arg.Column5,
		arg.Column6,
	)
	return err
}

const deleteTodo = `-- name: DeleteTodo :exec
DELETE FROM Todos WHERE id=?
`

func (q *Queries) DeleteTodo(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTodo, id)
	return err
}

const getAllTodos = `-- name: GetAllTodos :many
SELECT id, title, description, category_id, severity, done, archived, created_at, updated_at from Todos
`

func (q *Queries) GetAllTodos(ctx context.Context) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, getAllTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.CategoryID,
			&i.Severity,
			&i.Done,
			&i.Archived,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
